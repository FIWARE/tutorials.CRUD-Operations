{
	"info": {
		"_postman_id": "35d014dc-aa73-4424-8307-2e177af64f2a",
		"name": "FIWARE CRUD Operations",
		"description": "This tutorial builds on the data created in the previous [stock management example](http://fiware.github.io/tutorials.Entity-Relationships/) and introduces the concept of [CRUD operations](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete), allowing users to manipulate the data held within the context.\n\nThe `docker-compose` file for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.CRUD-Operations/icon/GitHub-Mark-32px.png) [FIWARE 103: Manipulating Context Data through CRUD Operations ](https://github.com/Fiware/tutorials.CRUD-Operations)\n\n# Data Entities\n\nWithin the FIWARE platform, an entity represents the state of a physical or\nconceptual object which exists in the real world.\n\n## Entities within a stock management system\n\nWithin our simple stock management system, we currently have four entity types.\nThe relationships between our entities are defined as shown below:\n\n![](https://fiware.github.io/tutorials.Entity-Relationships/img/entities.png)\n\n-   A **Store** is a real world bricks and mortar building. Stores would have\n    properties such as:\n    -   Store name, e.g. \"Checkpoint Markt\"\n    -   Address, e.g. \"Friedrichstraße 44, 10969 Kreuzberg, Berlin\"\n    -   Physical location, e.g. _52.5075 N, 13.3903 E_\n-   A **Shelf** is a real world object to hold items which we wish to sell.\n    Each shelf would have properties such as:\n    -   Shelf name, e.g. \"Wall Unit\"\n    -   Physical location, e.g. _52.5075 N, 13.3903 E_\n    -   Maximum capacity\n    -   An association to the store in which the shelf is located\n-   A **Product** is defined as something that we sell - it is a conceptual\n    object. Products would have properties such as:\n    -   Product name, e.g. \"Melons\"\n    -   Price, e.g. 13.99 Euros\n    -   Size, e.g. Small\n-   An **Inventory Item** is another conceptual entity, used to associate\n    products, stores, shelves and physical objects. It would have properties\n    such as:\n    -   An association to the product being sold\n    -   An association to the store in which the product is being sold\n    -   An association to the shelf where the product is being displayed\n    -   Stock count, i.e. product quantity available in the warehouse\n    -   Shelf count, i.e. number of items available on the shelf\n\nAs you can see, each of the entities defined above contain some properties which\nare liable to change. For example, product price could change, stock could be sold\nand the number of items on the shelves would drop.\n\n# Architecture\n\nThis application will only make use of one FIWARE component - the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/). Using\nthe Orion Context Broker is sufficient for an application to qualify as\n_“Powered by FIWARE”_.\n\nCurrently, the Orion Context Broker relies on open source\n[MongoDB](https://www.mongodb.com/) technology to store the context data it\nmanages. Therefore, the architecture will consist of two components:\n\n-   The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/)\n    which will receive requests using\n    [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n-   The underlying [MongoDB](https://www.mongodb.com/) database:\n    -   Used by the Orion Context Broker to store context information such\n        as data entities, subscriptions and registrations\n\nSince the two components interact by means of HTTP requests, they can be\ncontainerized and run from exposed ports.\n\n![](https://fiware.github.io/tutorials.CRUD-Operations/img/architecture.png)\n\nThe necessary configuration information can be seen in the services section of\nthe associated `docker-compose.yml` file:\n\n```yaml\norion:\n    image: fiware/orion:latest\n    hostname: orion\n    container_name: orion\n    depends_on:\n        - mongo-db\n    networks:\n        - default\n    expose:\n        - \"1026\"\n    ports:\n        - \"1026:1026\"\n    command: -dbhost mongo-db -logLevel DEBUG\n```\n\n```yaml\nmongo-db:\n    image: mongo:3.6\n    hostname: mongo-db\n    container_name: db-mongo\n    expose:\n        - \"27017\"\n    ports:\n        - \"27017:27017\"\n    networks:\n        - default\n    command: --bind_ip_all --smallfiles\n```\n\nBoth containers reside on the same network - the Orion Context Broker is\nlistening on port `1026` and MongoDB is listening on the default port `271071`.\nFor the sake of this tutorial, we have also made the two ports available from\noutside the network so that cUrl or Postman can access them without having to\nbe run from inside the network. The command-line initialization should be self\nexplanatory.\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple both components will be run using\n[Docker](https://www.docker.com). **Docker** is a container technology which\nallows to package each component with its environment and run it in isolation.\n\n-   To install Docker on Windows follow the instructions\n    [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions\n    [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions\n    [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker\napplications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Entity-Relationships/master/docker-compose.yml)\nis used configure the required services for the application. This means all\ncontainer services can be brought up with a single command. Docker Compose is\ninstalled by default as part of Docker for Windows and Docker for Mac, however\nLinux users will need to follow the instructions found\n[here](https://docs.docker.com/compose/install/)\n\nYou can check your current **Docker** and **Docker Compose** versions using the\nfollowing commands:\n\n```console\ndocker-compose -v\ndocker version\n```\n\nPlease ensure that you are using Docker version 20.10 or higher and Docker\nCompose 1.21 or higher and upgrade if necessary.\n\n## Cygwin\n\nWe will start up our services using a simple bash script. Windows users should\ndownload [cygwin](http://www.cygwin.com/) to provide a command-line\nfunctionality similar to a Linux distribution on Windows.\n\n# Start Up\n\nAll services can be initialised from the command-line by running the bash script\nprovided within the repository. Please clone the repository and create the\nnecessary images by running the commands as shown below:\n\n```console\ngit clone git@github.com:Fiware/tutorials.CRUD-Operations.git\ncd tutorials.CRUD-Operations\n\n./services start\n```\n\nThis command will also import seed data from the previous\n[Store Finder tutorial](https://github.com/Fiware/tutorials.Entity-Relationships)\non startup.\n\n> :information_source: **Note:** If you want to clean up and start over again\n> you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n# What is CRUD?\n\n**Create**, **Read**, **Update** and **Delete** are the four basic functions of\npersistent storage. These operations are usually referred to using the acronym\n**CRUD**. Within a database each of these operations map directly to a series of\ncommands, however their relationship with a RESTful API is slightly more complex.\n\nThe [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) uses\n[NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) to manipulate the\ncontext data. As a RESTful API, requests to manipulate the data held within the\ncontext follow the standard conventions found when mapping HTTP verbs to CRUD\noperations.\n\n## Entity CRUD Operations\n\nFor operations where the `<entity-id>` is not yet known within the context, or\nis unspecified, the `/v2/entities` endpoint is used.\n\nOnce an `<entity-id>` is known within the context, individual data entities can\nbe manipulated using the `/v2/entities/<entity-id>` endpoint.\n\nIt is recommended that entity identifiers should be URNs following the\n[NGSI-LD guidelines](https://docbox.etsi.org/ISG/CIM/Open/ISG_CIM_NGSI-LD_API_Draft_for_public_review.pdf),\ntherefore each `id` is a URN which follows a standard format:\n`urn:ngsi-ld:<entity-type>:<entity-id>`. This helps making every `id` in the\ncontext data unique.\n\n| HTTP Verb  |                                               `/v2/entities`                                               |                                              `/v2/entities/<entity-id>`                                              |\n| ---------- | :--------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------: |\n| **POST**   |                                CREATE a new entity and add to the context.                                 |                                 CREATE or UPDATE an attribute of a specified entity.                                 |\n| **GET**    | READ entity data from the context. This will return data from multiple entities. The data can be filtered. | READ entity data from a specified entity. This will return data from a single entity only. The data can be filtered. |\n| **PUT**    |                                                    :x:                                                     |                                                         :x:                                                          |\n| **PATCH**  |                                                    :x:                                                     |                                                         :x:                                                          |\n| **DELETE** |                                                    :x:                                                     |                                          DELETE an entity from the context                                           |\n\nA complete list of entity endpoints can be found in the\n[NGSI v2 Swagger Specification](https://fiware.github.io/specifications/OpenAPI/ngsiv2#/Entities)\n\n## Attribute CRUD Operations\n\nTo perform CRUD operations on attributes, the `<entity-id>` must be known. Each\nattribute is effectively a key-value pair.\n\nThere are three endpoints:\n\n-   `/v2/entities/<entity-id>/attrs` is only used for a patch operation to\n    update one or more exisiting attributes.\n-   `/v2/entities/<entity-id>/attrs/<attribute>` is used to manipulate an\n    attribute as a whole.\n-   `/v2/entities/<entity-id>/attrs/<attribute>/value` is used to read or update\n    the `value` of an attribute, leaving the `type` untouched.\n\n| HTTP Verb   |                           `.../attrs`                           |                `.../attrs/<attribute>`                |                              `.../attrs/<attribute>/value`                               |\n| ----------- | :-------------------------------------------------------------: | :---------------------------------------------------: | :--------------------------------------------------------------------------------------: |\n| **POST**    |                               :x:                               |                          :x:                          |                                           :x:                                            |\n| **GET**     |                               :x:                               |                          :x:                          | READ the value of an attribute from a specified entity. This will return a single field. |\n| **PUT**     |                               :x:                               |                          :x:                          |              UPDATE the value of single attribute from a specified entity.               |\n| **PATCH**   | UPDATE one or more existing attributes from an existing entity. |                          :x:                          |                                           :x:                                            |\n| **DELETE**. |                               :x:                               | DELETE an existing attribute from an existing entity. |                                           :x:                                            |\n\nA complete list of attribute endpoints can be found in the\n[NGSI v2 Swagger Specification](https://fiware.github.io/specifications/OpenAPI/ngsiv2#/Attributes)\n\n## Batch CRUD Operations\n\nAdditionally the Orion Context Broker has a convenience batch operation endpoint\n`/v2/op/update` to manipulate multiple entities in a single operation.\n\nBatch operations are always triggered by a POST request where the payload is an\nobject with two properties:\n\n-   `actionType` specifies the kind of action to invoke (e.g. `delete`)\n-   `entities` is an array of objects holding the list of entities to update, along\n    with the relevant entity data used to perform the operation.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Operations",
			"item": [
				{
					"name": "Create a New Data Entity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n      \"id\":\"urn:ngsi-ld:Product:010\", \"type\":\"Product\",\n      \"name\":{\"type\":\"Text\", \"value\":\"Lemonade\"},\n      \"size\":{\"type\":\"Text\", \"value\": \"S\"},\n      \"price\":{\"type\":\"Integer\", \"value\": 99}\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							]
						},
						"description": "This example adds a new **Product** entity to the context.\n\nNew entities can be added by making a POST request to the `/v2/entities/` endpoint.\n\nThe request will **fail** if any of the attributes already exist in the context.\n\nAny entity must have a `id` and `type` attributes, each additional attributes are optional \nand will depend on the system being described. Each additional attribute should also have a \ndefined `type` and a `value` attribute. The product has been assigned a unique `id` following\nthe NGSI-LD  [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)  and has been assigned `type=Product`.\n\n---\nSubsequent requests using the same `id` will result in an error response."
					},
					"response": []
				},
				{
					"name": "Create a New Attribute",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"specialOffer\":{\"value\": true}\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/attrs",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								"attrs"
							]
						},
						"description": "This example adds a new `specialOffer` attribute to the existing **Product** entity with `id=urn:ngsi-ld:Product:001`\n\nNew attributes can be added by making a POST request to the `/v2/entities/<entity>/attrs` endpoint. \n\nThe payload should consist of a JSON object holding the attribute names and values as shown. \n\nIf no `type` is specified a default `type` (`Boolean`, `Text` or `Number` or `StructuredValue`) will be assigned.\n\n---\nSubsequent requests using the same `id` will update the value of the attribute in the context"
					},
					"response": []
				},
				{
					"name": "Batch Create New Data Entities or Attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"append_strict\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:011\", \"type\":\"Product\",\n      \"name\":{\"type\":\"Text\", \"value\":\"Brandy\"},\n      \"size\":{\"type\":\"Text\", \"value\": \"M\"},\n      \"price\":{\"type\":\"Integer\", \"value\": 1199}\n    },\n    {\n      \"id\":\"urn:ngsi-ld:Product:012\", \"type\":\"Product\",\n      \"name\":{\"type\":\"Text\", \"value\":\"Port\"},\n      \"size\":{\"type\":\"Text\", \"value\": \"M\"},\n      \"price\":{\"type\":\"Integer\", \"value\": 1099}\n    },\n    {\n      \"id\":\"urn:ngsi-ld:Product:001\", \"type\":\"Product\",\n      \"offerPrice\":{\"type\":\"Integer\", \"value\": 89}\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update",
								""
							]
						},
						"description": "This example uses the convenience batch processing endpoint to add two new **Product** entities and one new attribute (`offerPrice`)\nto the context. \n\nThe request will **fail** if any of the attributes already exist in the context.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes\n* `actionType=append_strict` means that the request only succeed if all entities / attributes are new.\n* The `entities` attribute holds an array of entities we wish to create.\n\nEach product has a unique `id` following the NGSI-LD  [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)  and has been assigned `type=Product`.\n\n---\nSubsequent requests using the same data with the `actionType=append_strict` batch operation will result in an error response."
					},
					"response": []
				},
				{
					"name": "Batch Create/Overwrite New Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"append\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:011\", \"type\":\"Product\",\n      \"name\":{\"type\":\"Text\", \"value\":\"Brandy\"},\n      \"size\":{\"type\":\"Text\", \"value\": \"M\"},\n      \"price\":{\"type\":\"Integer\", \"value\": 1199}\n    },\n    {\n      \"id\":\"urn:ngsi-ld:Product:012\", \"type\":\"Product\",\n      \"name\":{\"type\":\"Text\", \"value\":\"Port\"},\n      \"size\":{\"type\":\"Text\", \"value\": \"M\"},\n      \"price\":{\"type\":\"Integer\", \"value\": 1099}\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update",
								""
							]
						},
						"description": "This example uses the convenience batch processing endpoint to add or amend two **Product** entities and one attribute (`offerPrice`) to the context.\n\n-   `actionType=append` means we will overwrite existing entities if they exist\n-   The entities attribute holds an array of entities we wish to\n    create/overwrite.\n\nA subsequent request containing the same data (i.e. same entities and `actionType=append`)\nwon't change the context state.\n\n\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes:\n* `actionType=append` means we will overwrite existing entities if they exist\n* The `entities` attribute holds an array of entities we wish to create/overwrite.\n\nEach product has a unique `id` following the NGSI-LD  [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)  and has been assigned `type=Product`."
					},
					"response": []
				}
			],
			"description": "Create Operations map to HTTP POST.\n\n-   The `/v2/entities` endpoint is used for creating new entities\n-   The `/v2/entities/<entity>` endpoint is used for adding new attributes\n\nAny newly created entity must have `id` and `type` attributes, other attributes\nare optional and will depend on the system being modelled. If additional\nattributes are present though, each should specify both a `type` and a `value`.\n\nThe response will be **204 - No Content** if the operation is successful or\n**422 - Unprocessable Entity** if the operation fails.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e188a3c9-0964-40d4-bb85-30f8dba187dd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "50a197ae-0c79-49f9-9f06-850bcee94f15",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Read Operations",
			"item": [
				{
					"name": "Read a Data Entity (verbose)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:010",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:010"
							]
						},
						"description": "This example reads the full context from an existing **Product** entity with a known id.\n\nContext data can be retrieved by making a GET request to the `/v2/entities/<entity>` endpoint."
					},
					"response": []
				},
				{
					"name": "Read an Attribute from a Data Entity",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/attrs/name/value",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								"attrs",
								"name",
								"value"
							]
						},
						"description": "This example reads the value of a single attribute (`name`)  from an existing **Product** entity with a known `id`.\n\nContext data can be retrieved by making a GET request to the `/v2/entities/<entity>/attrs/<attribute>/value` endpoint."
					},
					"response": []
				},
				{
					"name": "Read a Data Entity (key value pairs)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/?options=keyValues&attrs=name,price",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only\n"
								},
								{
									"key": "attrs",
									"value": "name,price",
									"description": "Ordered list of attribute names to display"
								}
							]
						},
						"description": "This example reads the key-value pairs for two requested attributes (`name` and `price`) from the context of existing **Product** entity with a known `id`.\n\nCombine the `options=keyValues` parameter and the `attrs` parameter to obtain key-values."
					},
					"response": []
				},
				{
					"name": "Read Multiple attributes values from a Data Entity",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/?options=values&attrs=name,price",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "values",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "attrs",
									"value": "name,price",
									"description": "Ordered list of attribute names to display"
								}
							]
						},
						"description": "This example reads the value of two requested attributes (`name` and `price`) from the context of existing **Product** entity with a known `id`.\n\nCombine the `options=values` parameter and the `attrs` parameter to return a list of values in an array"
					},
					"response": []
				},
				{
					"name": "List all Data Entities (verbose)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/?type=Product",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Product"
								}
							]
						},
						"description": "This example lists the full context of all **Product** entities.\n\nFull context data  for a specified entity type can be retrieved by making a GET request to the `/v2/entities/` endpoint and supplying the `type` parameter."
					},
					"response": []
				},
				{
					"name": "List all Data Entities (key value pairs)",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/?type=Product&options=keyValues&attrs=name,price",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Product",
									"description": "Entity type"
								},
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only\n"
								},
								{
									"key": "attrs",
									"value": "name,price",
									"description": "Ordered list of attribute names to display"
								}
							]
						},
						"description": "This example lists the `name` and `price` attributes of all **Product** entities.\n\nFull context data  for a specified entity type can be retrieved by making a GET request to the `/v2/entities/` endpoint and supplying the `type` parameter  combine this with the `options=keyValues` parameter and the `attrs` parameter to obtain key-values."
					},
					"response": []
				},
				{
					"name": "List Data Entity by id",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/?type=Product&options=count&attrs=id",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Product",
									"description": "Entity type"
								},
								{
									"key": "options",
									"value": "count",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "attrs",
									"value": "id",
									"description": "Ordered list of attribute names to display"
								}
							]
						},
						"description": "This example lists the `id` and `type` of all **Product** entities.\n\nContext data  for a specified entity type can be retrieved by making a GET request to the `/v2/entities/` endpoint and supplying the `type` parameter. Combine this with `options=count` and `attrs=id` to return the `id` attributes of the given `type`"
					},
					"response": []
				}
			],
			"description": "Read Operations map to HTTP GET.\n\n* The `/v2/entities/` endpoint is used for listing operations\n* The `/v2/entities/<entity>` endpoint is used for retrieving the details of a single entity\n\n## Filtering\n\n* The `options` parameter (combined with the `attrs` parameter) is used to filter the fields returned\n* The `q` parameter can be used to filter the entities returned \n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc10dc62-ba5f-4e31-b75e-20e743651cb4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6d3402d3-9f76-4770-96a6-3ea6b7325376",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update Operations",
			"item": [
				{
					"name": "Overwrite the value of an Attribute value",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "89"
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/attrs/price/value",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								"attrs",
								"price",
								"value"
							]
						},
						"description": "This example updates the value of the `price` attribute of the Entity with `id=urn:ngsi-ld:Product:001`\n\nExisiting attribute values can be altered by making a PUT request to the `/v2/entities/<entity>/attrs/<attribute>/value` endpoint."
					},
					"response": []
				},
				{
					"name": "Overwrite Multiple Attributes of a Data Entity",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n      \"price\":{\"type\":\"Integer\", \"value\": 89}\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:001/attrs",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:001",
								"attrs"
							]
						},
						"description": "This example simultaneously updates the values of both the `price` and `name` attributes of the Entity with `id=urn:ngsi-ld:Product:001`\n\nMultiple Existing attribute values can be updated by making a PATCH request to the `/v2/entities/<entity>/attrs` endpoint."
					},
					"response": []
				},
				{
					"name": "Batch Overwrite Attributes of Multiple Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"update\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:001\", \"type\":\"Product\",\n      \"price\":{\"type\":\"Integer\", \"value\": 1199}\n    },\n    {\n      \"id\":\"urn:ngsi-ld:Product:002\", \"type\":\"Product\",\n      \"price\":{\"type\":\"Integer\", \"value\": 1199},\n      \"size\": {\"type\":\"Text\", \"value\": \"L\"}\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to create a series of available products.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=update` means we will overwrite existing entities if they exist whereas the `entities` attribute holds an array of entities we wish to update.\n\nEach product has a unique `id` following the NGSI-LD  [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)  and has been assigned `type=Product`."
					},
					"response": []
				},
				{
					"name": "Batch  Create/Overwrite Attributes of Multiple Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"append\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:001\", \"type\":\"Product\",\n      \"price\":{\"type\":\"Integer\", \"value\": 1199}\n    },\n    {\n      \"id\":\"urn:ngsi-ld:Product:002\", \"type\":\"Product\",\n      \"price\":{\"type\":\"Integer\", \"value\": 1199},\n      \"specialOffer\": {\"type\":\"Boolean\", \"value\":  true}\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to create a series of available products.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=append` means we will overwrite existing entities if they exist whereas the `entities` attribute holds an array of entities we wish to update.\n\nEach product has a unique `id` following the NGSI-LD  [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)  and has been assigned `type=Product`."
					},
					"response": []
				},
				{
					"name": "Batch Replace Entity Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"replace\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:010\", \"type\":\"Product\",\n      \"price\":{\"type\":\"Integer\", \"value\": 1199}\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to create a series of available products.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=replace` means we will overwrite existing entities if they exist whereas the `entities` attribute holds an array of entities we wish to update.\n\nEach product has a unique `id` following the NGSI-LD  [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)  and has been assigned `type=Product`."
					},
					"response": []
				}
			],
			"description": "Overwrite operations are mapped to HTTP PUT.\nHTTP PATCH can be used to update several attributes at once.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "061914f4-8b31-4177-a3e2-5a7d0bf58522",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b098aeb4-22e9-4224-a638-ac10bb75d84f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete Operations",
			"item": [
				{
					"name": "Delete a Data Entity",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:010",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:010"
							]
						},
						"description": "This example deletes the Entity with `id=urn:ngsi-ld:Product:001` from the context\n\nEntities be deleted by making a DELETE request to the `/v2/entities/<entity>` endpoint.\n\n---\nSubsequent requests using the same `id` will result in an error response since the entity no longer exists"
					},
					"response": []
				},
				{
					"name": "Delete an Attribute from a Data Entity",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/urn:ngsi-ld:Product:010/attrs/specialOffer",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Product:010",
								"attrs",
								"specialOffer"
							]
						},
						"description": "This example remove the `specialOffer` attribute from the Entity with `id=urn:ngsi-ld:Product:010` \n\nAttributes be deleted by making a DELETE request to the `/v2/entities/<entity>/attrs/<attribute>` endpoint.\n\n---\nIf the attribute does not exist in the context, the result in an error response."
					},
					"response": []
				},
				{
					"name": "Batch Delete Multiple Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"delete\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:001\", \"type\":\"Product\"\n    },\n    {\n      \"id\":\"urn:ngsi-ld:Product:002\", \"type\":\"Product\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to delete a series of available products.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=delete` means we will\ndelete something from the context and the `entities` attribute holds the `id` of the entities we wish to update.\n\n---\nIf any entity does not exist in the context, the result in an error response."
					},
					"response": []
				},
				{
					"name": "Batch Delete  Multiple Attributes from a Data Entity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"actionType\":\"delete\",\n  \"entities\":[\n    {\n      \"id\":\"urn:ngsi-ld:Product:010\", \"type\":\"Product\",\n      \"price\":{},\n      \"name\": {}\n    }\n  ]\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/op/update",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"op",
								"update"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to delete a series of attributes from  an available product.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=delete` means we will\ndelete something from the context and the `entities` attribute holds an array of attributes we wish to update.\n\n---\nIf any attribute does not exist in the context, the result in an error response."
					},
					"response": []
				},
				{
					"name": "Find existing data relationships",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/?q=refProduct==urn:ngsi-ld:Product:001&options=count&attrs=type",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "refProduct==urn:ngsi-ld:Product:001"
								},
								{
									"key": "options",
									"value": "count",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "attrs",
									"value": "type",
									"description": "Ordered list of attribute names to display"
								}
							]
						},
						"description": "This example returns the key of all entities directly associated with the `urn:ngsi-ld:Product:001`.\n\n* If this request returns an empty array, the entity has no associates - it can be safely deleted\n* If the response lists a series of **InventoryItem** entities they should be deleted before the product is removed from the context.\n\n\nNote that we deleted **Product** `urn:ngsi-ld:Product:001` earlier, so what we\nsee above is actually a dangling reference, i.e. the returned **InventoryItem**\nreferences a **Product** that no longer exists."
					},
					"response": []
				}
			],
			"description": "Delete Operations map to HTTP DELETE.\n\n## Data Relationships\n\nIf there are entities within the context which relate to one another, you must be careful when deleting an entity. You will need to check that no references are left dangling once the entity has been deleted. \n\nOrganizing a cascade of deletions is beyond the scope of this tutorial, but it would be possible using a batch delete request.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "add1245d-f9c3-4610-ae32-d12708236de5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0dd3c8e8-b424-43ae-a176-72bcb7b2ba7c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "dff76437-6762-4f0f-9258-d0e5c77cca33",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "afdd2592-13bb-436d-a728-8af2d8c3d958",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0b237012-4447-4688-bc10-bd8332c946c3",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string"
		}
	]
}